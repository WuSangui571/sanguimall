{"remainingRequest":"D:\\02-WorkSpace\\02-Java\\sanguimall\\RuoYi-Vue-master\\ruoyi-ui\\node_modules\\babel-loader\\lib\\index.js!D:\\02-WorkSpace\\02-Java\\sanguimall\\RuoYi-Vue-master\\ruoyi-ui\\node_modules\\quill\\modules\\keyboard.js","dependencies":[{"path":"D:\\02-WorkSpace\\02-Java\\sanguimall\\RuoYi-Vue-master\\ruoyi-ui\\node_modules\\quill\\modules\\keyboard.js","mtime":1759557070700},{"path":"D:\\02-WorkSpace\\02-Java\\sanguimall\\RuoYi-Vue-master\\ruoyi-ui\\babel.config.js","mtime":1757035093000},{"path":"D:\\02-WorkSpace\\02-Java\\sanguimall\\RuoYi-Vue-master\\ruoyi-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1759557068287},{"path":"D:\\02-WorkSpace\\02-Java\\sanguimall\\RuoYi-Vue-master\\ruoyi-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":1759557070186}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["_lodashEs","require","_quillDelta","_interopRequireWildcard","_parchment","_quill","_interopRequireDefault","_logger","_module","debug","logger","SHORTKEY","exports","test","navigator","platform","Keyboard","default","_Module","quill","options","_this","_classCallCheck2","_callSuper2","bindings","Object","keys","forEach","name","addBinding","key","shiftKey","handleEnter","metaKey","ctrlKey","altKey","userAgent","collapsed","handleBackspace","handleDelete","prefix","suffix","handleDeleteRange","offset","listen","_inherits2","_createClass2","value","keyBinding","_this2","context","arguments","length","undefined","handler","binding","normalize","warn","Array","isArray","singleBinding","_objectSpread2","push","_this3","root","addEventListener","evt","defaultPrevented","isComposing","keyCode","concat","which","matches","filter","match","blot","Quill","find","target","scroll","range","getSelection","hasFocus","_this3$quill$getLine","getLine","index","_this3$quill$getLine2","_slicedToArray2","line","_this3$quill$getLeaf","getLeaf","_this3$quill$getLeaf2","leafStart","offsetStart","_ref3","_ref4","leafEnd","offsetEnd","prefixText","TextBlot","slice","suffixText","curContext","empty","format","getFormat","event","prevented","some","every","_typeof2","isEqual","call","preventDefault","getLength","formats","_this$quill$getLine","_this$quill$getLine2","delta","Delta","retain","delete","_this$quill$getLine3","_this$quill$getLine4","prev","isPrevLineEmpty","statics","blotName","curFormats","prevFormats","AttributeMap","diff","formatDelta","compose","updateContents","sources","USER","focus","_this$quill$getLine5","_this$quill$getLine6","_this$quill$getLine7","_this$quill$getLine8","next","nextFormats","deleteRange","_this4","lineFormats","reduce","query","Scope","BLOCK","insert","setSelection","SILENT","Module","defaultOptions","bold","makeFormatHandler","italic","underline","indent","outdent","list","makeCodeBlockHandler","deleteText","tab","table","history","cutoff","formatLine","_this$quill$getLine9","_this$quill$getLine0","scrollSelectionIntoView","_this$quill$getLine1","_this$quill$getLine10","header","module","getModule","_module$getTable","getTable","_module$getTable2","row","cell","shift","tableSide","blockquote","_this$quill$getLine11","_this$quill$getLine12","trim","insertText","_this$quill$getLine13","_this$quill$getLine14","numLines","cur","makeEmbedArrowHandler","makeTableArrowHandler","DEFAULTS","_ref","CodeBlock","TAB","lines","getLines","i","insertAt","domNode","textContent","startsWith","deleteAt","update","where","_defineProperty2","_this$quill$getLeaf","_this$quill$getLeaf2","leaf","EmbedBlot","shortKey","up","targetRow","parent","targetCell","children","head","Math","min","targetLine","cloneDeep","_ref2","firstFormats","lastFormats","_table"],"sources":["../../src/modules/keyboard.ts"],"sourcesContent":["import { cloneDeep, isEqual } from 'lodash-es';\nimport Delta, { AttributeMap } from 'quill-delta';\nimport { EmbedBlot, Scope, TextBlot } from 'parchment';\nimport type { Blot, BlockBlot } from 'parchment';\nimport Quill from '../core/quill.js';\nimport logger from '../core/logger.js';\nimport Module from '../core/module.js';\nimport type { BlockEmbed } from '../blots/block.js';\nimport type { Range } from '../core/selection.js';\n\nconst debug = logger('quill:keyboard');\n\nconst SHORTKEY = /Mac/i.test(navigator.platform) ? 'metaKey' : 'ctrlKey';\n\nexport interface Context {\n  collapsed: boolean;\n  empty: boolean;\n  offset: number;\n  prefix: string;\n  suffix: string;\n  format: Record<string, unknown>;\n  event: KeyboardEvent;\n  line: BlockEmbed | BlockBlot;\n}\n\ninterface BindingObject\n  extends Partial<Omit<Context, 'prefix' | 'suffix' | 'format'>> {\n  key: number | string | string[];\n  shortKey?: boolean | null;\n  shiftKey?: boolean | null;\n  altKey?: boolean | null;\n  metaKey?: boolean | null;\n  ctrlKey?: boolean | null;\n  prefix?: RegExp;\n  suffix?: RegExp;\n  format?: Record<string, unknown> | string[];\n  handler?: (\n    this: { quill: Quill },\n    range: Range,\n    curContext: Context,\n    // eslint-disable-next-line no-use-before-define\n    binding: NormalizedBinding,\n  ) => boolean | void;\n}\n\ntype Binding = BindingObject | string | number;\n\ninterface NormalizedBinding extends Omit<BindingObject, 'key' | 'shortKey'> {\n  key: string | number;\n}\n\ninterface KeyboardOptions {\n  bindings: Record<string, Binding>;\n}\n\ninterface KeyboardOptions {\n  bindings: Record<string, Binding>;\n}\n\nclass Keyboard extends Module<KeyboardOptions> {\n  static DEFAULTS: KeyboardOptions;\n\n  static match(evt: KeyboardEvent, binding: BindingObject) {\n    if (\n      (['altKey', 'ctrlKey', 'metaKey', 'shiftKey'] as const).some((key) => {\n        return !!binding[key] !== evt[key] && binding[key] !== null;\n      })\n    ) {\n      return false;\n    }\n    return binding.key === evt.key || binding.key === evt.which;\n  }\n\n  bindings: Record<string, NormalizedBinding[]>;\n\n  constructor(quill: Quill, options: Partial<KeyboardOptions>) {\n    super(quill, options);\n    this.bindings = {};\n    // @ts-expect-error Fix me later\n    Object.keys(this.options.bindings).forEach((name) => {\n      // @ts-expect-error Fix me later\n      if (this.options.bindings[name]) {\n        // @ts-expect-error Fix me later\n        this.addBinding(this.options.bindings[name]);\n      }\n    });\n    this.addBinding({ key: 'Enter', shiftKey: null }, this.handleEnter);\n    this.addBinding(\n      { key: 'Enter', metaKey: null, ctrlKey: null, altKey: null },\n      () => {},\n    );\n    if (/Firefox/i.test(navigator.userAgent)) {\n      // Need to handle delete and backspace for Firefox in the general case #1171\n      this.addBinding(\n        { key: 'Backspace' },\n        { collapsed: true },\n        this.handleBackspace,\n      );\n      this.addBinding(\n        { key: 'Delete' },\n        { collapsed: true },\n        this.handleDelete,\n      );\n    } else {\n      this.addBinding(\n        { key: 'Backspace' },\n        { collapsed: true, prefix: /^.?$/ },\n        this.handleBackspace,\n      );\n      this.addBinding(\n        { key: 'Delete' },\n        { collapsed: true, suffix: /^.?$/ },\n        this.handleDelete,\n      );\n    }\n    this.addBinding(\n      { key: 'Backspace' },\n      { collapsed: false },\n      this.handleDeleteRange,\n    );\n    this.addBinding(\n      { key: 'Delete' },\n      { collapsed: false },\n      this.handleDeleteRange,\n    );\n    this.addBinding(\n      {\n        key: 'Backspace',\n        altKey: null,\n        ctrlKey: null,\n        metaKey: null,\n        shiftKey: null,\n      },\n      { collapsed: true, offset: 0 },\n      this.handleBackspace,\n    );\n    this.listen();\n  }\n\n  addBinding(\n    keyBinding: Binding,\n    context:\n      | Required<BindingObject['handler']>\n      | Partial<Omit<BindingObject, 'key' | 'handler'>> = {},\n    handler:\n      | Required<BindingObject['handler']>\n      | Partial<Omit<BindingObject, 'key' | 'handler'>> = {},\n  ) {\n    const binding = normalize(keyBinding);\n    if (binding == null) {\n      debug.warn('Attempted to add invalid keyboard binding', binding);\n      return;\n    }\n    if (typeof context === 'function') {\n      context = { handler: context };\n    }\n    if (typeof handler === 'function') {\n      handler = { handler };\n    }\n    const keys = Array.isArray(binding.key) ? binding.key : [binding.key];\n    keys.forEach((key) => {\n      const singleBinding = {\n        ...binding,\n        key,\n        ...context,\n        ...handler,\n      };\n      this.bindings[singleBinding.key] = this.bindings[singleBinding.key] || [];\n      this.bindings[singleBinding.key].push(singleBinding);\n    });\n  }\n\n  listen() {\n    this.quill.root.addEventListener('keydown', (evt) => {\n      if (evt.defaultPrevented || evt.isComposing) return;\n\n      // evt.isComposing is false when pressing Enter/Backspace when composing in Safari\n      // https://bugs.webkit.org/show_bug.cgi?id=165004\n      const isComposing =\n        evt.keyCode === 229 && (evt.key === 'Enter' || evt.key === 'Backspace');\n      if (isComposing) return;\n\n      const bindings = (this.bindings[evt.key] || []).concat(\n        this.bindings[evt.which] || [],\n      );\n      const matches = bindings.filter((binding) =>\n        Keyboard.match(evt, binding),\n      );\n      if (matches.length === 0) return;\n      // @ts-expect-error\n      const blot = Quill.find(evt.target, true);\n      if (blot && blot.scroll !== this.quill.scroll) return;\n      const range = this.quill.getSelection();\n      if (range == null || !this.quill.hasFocus()) return;\n      const [line, offset] = this.quill.getLine(range.index);\n      const [leafStart, offsetStart] = this.quill.getLeaf(range.index);\n      const [leafEnd, offsetEnd] =\n        range.length === 0\n          ? [leafStart, offsetStart]\n          : this.quill.getLeaf(range.index + range.length);\n      const prefixText =\n        leafStart instanceof TextBlot\n          ? leafStart.value().slice(0, offsetStart)\n          : '';\n      const suffixText =\n        leafEnd instanceof TextBlot ? leafEnd.value().slice(offsetEnd) : '';\n      const curContext = {\n        collapsed: range.length === 0,\n        // @ts-expect-error Fix me later\n        empty: range.length === 0 && line.length() <= 1,\n        format: this.quill.getFormat(range),\n        line,\n        offset,\n        prefix: prefixText,\n        suffix: suffixText,\n        event: evt,\n      };\n      const prevented = matches.some((binding) => {\n        if (\n          binding.collapsed != null &&\n          binding.collapsed !== curContext.collapsed\n        ) {\n          return false;\n        }\n        if (binding.empty != null && binding.empty !== curContext.empty) {\n          return false;\n        }\n        if (binding.offset != null && binding.offset !== curContext.offset) {\n          return false;\n        }\n        if (Array.isArray(binding.format)) {\n          // any format is present\n          if (binding.format.every((name) => curContext.format[name] == null)) {\n            return false;\n          }\n        } else if (typeof binding.format === 'object') {\n          // all formats must match\n          if (\n            !Object.keys(binding.format).every((name) => {\n              // @ts-expect-error Fix me later\n              if (binding.format[name] === true)\n                return curContext.format[name] != null;\n              // @ts-expect-error Fix me later\n              if (binding.format[name] === false)\n                return curContext.format[name] == null;\n              // @ts-expect-error Fix me later\n              return isEqual(binding.format[name], curContext.format[name]);\n            })\n          ) {\n            return false;\n          }\n        }\n        if (binding.prefix != null && !binding.prefix.test(curContext.prefix)) {\n          return false;\n        }\n        if (binding.suffix != null && !binding.suffix.test(curContext.suffix)) {\n          return false;\n        }\n        // @ts-expect-error Fix me later\n        return binding.handler.call(this, range, curContext, binding) !== true;\n      });\n      if (prevented) {\n        evt.preventDefault();\n      }\n    });\n  }\n\n  handleBackspace(range: Range, context: Context) {\n    // Check for astral symbols\n    const length = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]$/.test(context.prefix)\n      ? 2\n      : 1;\n    if (range.index === 0 || this.quill.getLength() <= 1) return;\n    let formats = {};\n    const [line] = this.quill.getLine(range.index);\n    let delta = new Delta().retain(range.index - length).delete(length);\n    if (context.offset === 0) {\n      // Always deleting newline here, length always 1\n      const [prev] = this.quill.getLine(range.index - 1);\n      if (prev) {\n        const isPrevLineEmpty =\n          prev.statics.blotName === 'block' && prev.length() <= 1;\n        if (!isPrevLineEmpty) {\n          // @ts-expect-error Fix me later\n          const curFormats = line.formats();\n          const prevFormats = this.quill.getFormat(range.index - 1, 1);\n          formats = AttributeMap.diff(curFormats, prevFormats) || {};\n          if (Object.keys(formats).length > 0) {\n            // line.length() - 1 targets \\n in line, another -1 for newline being deleted\n            const formatDelta = new Delta()\n              // @ts-expect-error Fix me later\n              .retain(range.index + line.length() - 2)\n              .retain(1, formats);\n            delta = delta.compose(formatDelta);\n          }\n        }\n      }\n    }\n    this.quill.updateContents(delta, Quill.sources.USER);\n    this.quill.focus();\n  }\n\n  handleDelete(range: Range, context: Context) {\n    // Check for astral symbols\n    const length = /^[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/.test(context.suffix)\n      ? 2\n      : 1;\n    if (range.index >= this.quill.getLength() - length) return;\n    let formats = {};\n    const [line] = this.quill.getLine(range.index);\n    let delta = new Delta().retain(range.index).delete(length);\n    // @ts-expect-error Fix me later\n    if (context.offset >= line.length() - 1) {\n      const [next] = this.quill.getLine(range.index + 1);\n      if (next) {\n        // @ts-expect-error Fix me later\n        const curFormats = line.formats();\n        const nextFormats = this.quill.getFormat(range.index, 1);\n        formats = AttributeMap.diff(curFormats, nextFormats) || {};\n        if (Object.keys(formats).length > 0) {\n          delta = delta.retain(next.length() - 1).retain(1, formats);\n        }\n      }\n    }\n    this.quill.updateContents(delta, Quill.sources.USER);\n    this.quill.focus();\n  }\n\n  handleDeleteRange(range: Range) {\n    deleteRange({ range, quill: this.quill });\n    this.quill.focus();\n  }\n\n  handleEnter(range: Range, context: Context) {\n    const lineFormats = Object.keys(context.format).reduce(\n      (formats: Record<string, unknown>, format) => {\n        if (\n          this.quill.scroll.query(format, Scope.BLOCK) &&\n          !Array.isArray(context.format[format])\n        ) {\n          formats[format] = context.format[format];\n        }\n        return formats;\n      },\n      {},\n    );\n    const delta = new Delta()\n      .retain(range.index)\n      .delete(range.length)\n      .insert('\\n', lineFormats);\n    this.quill.updateContents(delta, Quill.sources.USER);\n    this.quill.setSelection(range.index + 1, Quill.sources.SILENT);\n    this.quill.focus();\n  }\n}\n\nconst defaultOptions: KeyboardOptions = {\n  bindings: {\n    bold: makeFormatHandler('bold'),\n    italic: makeFormatHandler('italic'),\n    underline: makeFormatHandler('underline'),\n    indent: {\n      // highlight tab or tab at beginning of list, indent or blockquote\n      key: 'Tab',\n      format: ['blockquote', 'indent', 'list'],\n      handler(range, context) {\n        if (context.collapsed && context.offset !== 0) return true;\n        this.quill.format('indent', '+1', Quill.sources.USER);\n        return false;\n      },\n    },\n    outdent: {\n      key: 'Tab',\n      shiftKey: true,\n      format: ['blockquote', 'indent', 'list'],\n      // highlight tab or tab at beginning of list, indent or blockquote\n      handler(range, context) {\n        if (context.collapsed && context.offset !== 0) return true;\n        this.quill.format('indent', '-1', Quill.sources.USER);\n        return false;\n      },\n    },\n    'outdent backspace': {\n      key: 'Backspace',\n      collapsed: true,\n      shiftKey: null,\n      metaKey: null,\n      ctrlKey: null,\n      altKey: null,\n      format: ['indent', 'list'],\n      offset: 0,\n      handler(range, context) {\n        if (context.format.indent != null) {\n          this.quill.format('indent', '-1', Quill.sources.USER);\n        } else if (context.format.list != null) {\n          this.quill.format('list', false, Quill.sources.USER);\n        }\n      },\n    },\n    'indent code-block': makeCodeBlockHandler(true),\n    'outdent code-block': makeCodeBlockHandler(false),\n    'remove tab': {\n      key: 'Tab',\n      shiftKey: true,\n      collapsed: true,\n      prefix: /\\t$/,\n      handler(range) {\n        this.quill.deleteText(range.index - 1, 1, Quill.sources.USER);\n      },\n    },\n    tab: {\n      key: 'Tab',\n      handler(range, context) {\n        if (context.format.table) return true;\n        this.quill.history.cutoff();\n        const delta = new Delta()\n          .retain(range.index)\n          .delete(range.length)\n          .insert('\\t');\n        this.quill.updateContents(delta, Quill.sources.USER);\n        this.quill.history.cutoff();\n        this.quill.setSelection(range.index + 1, Quill.sources.SILENT);\n        return false;\n      },\n    },\n    'blockquote empty enter': {\n      key: 'Enter',\n      collapsed: true,\n      format: ['blockquote'],\n      empty: true,\n      handler() {\n        this.quill.format('blockquote', false, Quill.sources.USER);\n      },\n    },\n    'list empty enter': {\n      key: 'Enter',\n      collapsed: true,\n      format: ['list'],\n      empty: true,\n      handler(range, context) {\n        const formats: Record<string, unknown> = { list: false };\n        if (context.format.indent) {\n          formats.indent = false;\n        }\n        this.quill.formatLine(\n          range.index,\n          range.length,\n          formats,\n          Quill.sources.USER,\n        );\n      },\n    },\n    'checklist enter': {\n      key: 'Enter',\n      collapsed: true,\n      format: { list: 'checked' },\n      handler(range) {\n        const [line, offset] = this.quill.getLine(range.index);\n        const formats = {\n          // @ts-expect-error Fix me later\n          ...line.formats(),\n          list: 'checked',\n        };\n        const delta = new Delta()\n          .retain(range.index)\n          .insert('\\n', formats)\n          // @ts-expect-error Fix me later\n          .retain(line.length() - offset - 1)\n          .retain(1, { list: 'unchecked' });\n        this.quill.updateContents(delta, Quill.sources.USER);\n        this.quill.setSelection(range.index + 1, Quill.sources.SILENT);\n        this.quill.scrollSelectionIntoView();\n      },\n    },\n    'header enter': {\n      key: 'Enter',\n      collapsed: true,\n      format: ['header'],\n      suffix: /^$/,\n      handler(range, context) {\n        const [line, offset] = this.quill.getLine(range.index);\n        const delta = new Delta()\n          .retain(range.index)\n          .insert('\\n', context.format)\n          // @ts-expect-error Fix me later\n          .retain(line.length() - offset - 1)\n          .retain(1, { header: null });\n        this.quill.updateContents(delta, Quill.sources.USER);\n        this.quill.setSelection(range.index + 1, Quill.sources.SILENT);\n        this.quill.scrollSelectionIntoView();\n      },\n    },\n    'table backspace': {\n      key: 'Backspace',\n      format: ['table'],\n      collapsed: true,\n      offset: 0,\n      handler() {},\n    },\n    'table delete': {\n      key: 'Delete',\n      format: ['table'],\n      collapsed: true,\n      suffix: /^$/,\n      handler() {},\n    },\n    'table enter': {\n      key: 'Enter',\n      shiftKey: null,\n      format: ['table'],\n      handler(range) {\n        const module = this.quill.getModule('table');\n        if (module) {\n          // @ts-expect-error\n          const [table, row, cell, offset] = module.getTable(range);\n          const shift = tableSide(table, row, cell, offset);\n          if (shift == null) return;\n          let index = table.offset();\n          if (shift < 0) {\n            const delta = new Delta().retain(index).insert('\\n');\n            this.quill.updateContents(delta, Quill.sources.USER);\n            this.quill.setSelection(\n              range.index + 1,\n              range.length,\n              Quill.sources.SILENT,\n            );\n          } else if (shift > 0) {\n            index += table.length();\n            const delta = new Delta().retain(index).insert('\\n');\n            this.quill.updateContents(delta, Quill.sources.USER);\n            this.quill.setSelection(index, Quill.sources.USER);\n          }\n        }\n      },\n    },\n    'table tab': {\n      key: 'Tab',\n      shiftKey: null,\n      format: ['table'],\n      handler(range, context) {\n        const { event, line: cell } = context;\n        const offset = cell.offset(this.quill.scroll);\n        if (event.shiftKey) {\n          this.quill.setSelection(offset - 1, Quill.sources.USER);\n        } else {\n          this.quill.setSelection(offset + cell.length(), Quill.sources.USER);\n        }\n      },\n    },\n    'list autofill': {\n      key: ' ',\n      shiftKey: null,\n      collapsed: true,\n      format: {\n        'code-block': false,\n        blockquote: false,\n        table: false,\n      },\n      prefix: /^\\s*?(\\d+\\.|-|\\*|\\[ ?\\]|\\[x\\])$/,\n      handler(range, context) {\n        if (this.quill.scroll.query('list') == null) return true;\n        const { length } = context.prefix;\n        const [line, offset] = this.quill.getLine(range.index);\n        if (offset > length) return true;\n        let value;\n        switch (context.prefix.trim()) {\n          case '[]':\n          case '[ ]':\n            value = 'unchecked';\n            break;\n          case '[x]':\n            value = 'checked';\n            break;\n          case '-':\n          case '*':\n            value = 'bullet';\n            break;\n          default:\n            value = 'ordered';\n        }\n        this.quill.insertText(range.index, ' ', Quill.sources.USER);\n        this.quill.history.cutoff();\n        const delta = new Delta()\n          .retain(range.index - offset)\n          .delete(length + 1)\n          // @ts-expect-error Fix me later\n          .retain(line.length() - 2 - offset)\n          .retain(1, { list: value });\n        this.quill.updateContents(delta, Quill.sources.USER);\n        this.quill.history.cutoff();\n        this.quill.setSelection(range.index - length, Quill.sources.SILENT);\n        return false;\n      },\n    },\n    'code exit': {\n      key: 'Enter',\n      collapsed: true,\n      format: ['code-block'],\n      prefix: /^$/,\n      suffix: /^\\s*$/,\n      handler(range) {\n        const [line, offset] = this.quill.getLine(range.index);\n        let numLines = 2;\n        let cur = line;\n        while (\n          cur != null &&\n          cur.length() <= 1 &&\n          cur.formats()['code-block']\n        ) {\n          // @ts-expect-error\n          cur = cur.prev;\n          numLines -= 1;\n          // Requisite prev lines are empty\n          if (numLines <= 0) {\n            const delta = new Delta()\n              // @ts-expect-error Fix me later\n              .retain(range.index + line.length() - offset - 2)\n              .retain(1, { 'code-block': null })\n              .delete(1);\n            this.quill.updateContents(delta, Quill.sources.USER);\n            this.quill.setSelection(range.index - 1, Quill.sources.SILENT);\n            return false;\n          }\n        }\n        return true;\n      },\n    },\n    'embed left': makeEmbedArrowHandler('ArrowLeft', false),\n    'embed left shift': makeEmbedArrowHandler('ArrowLeft', true),\n    'embed right': makeEmbedArrowHandler('ArrowRight', false),\n    'embed right shift': makeEmbedArrowHandler('ArrowRight', true),\n    'table down': makeTableArrowHandler(false),\n    'table up': makeTableArrowHandler(true),\n  },\n};\n\nKeyboard.DEFAULTS = defaultOptions;\n\nfunction makeCodeBlockHandler(indent: boolean): BindingObject {\n  return {\n    key: 'Tab',\n    shiftKey: !indent,\n    format: { 'code-block': true },\n    handler(range, { event }) {\n      const CodeBlock = this.quill.scroll.query('code-block');\n      // @ts-expect-error\n      const { TAB } = CodeBlock;\n      if (range.length === 0 && !event.shiftKey) {\n        this.quill.insertText(range.index, TAB, Quill.sources.USER);\n        this.quill.setSelection(range.index + TAB.length, Quill.sources.SILENT);\n        return;\n      }\n\n      const lines =\n        range.length === 0\n          ? this.quill.getLines(range.index, 1)\n          : this.quill.getLines(range);\n      let { index, length } = range;\n      lines.forEach((line, i) => {\n        if (indent) {\n          line.insertAt(0, TAB);\n          if (i === 0) {\n            index += TAB.length;\n          } else {\n            length += TAB.length;\n          }\n          // @ts-expect-error Fix me later\n        } else if (line.domNode.textContent.startsWith(TAB)) {\n          line.deleteAt(0, TAB.length);\n          if (i === 0) {\n            index -= TAB.length;\n          } else {\n            length -= TAB.length;\n          }\n        }\n      });\n      this.quill.update(Quill.sources.USER);\n      this.quill.setSelection(index, length, Quill.sources.SILENT);\n    },\n  };\n}\n\nfunction makeEmbedArrowHandler(\n  key: string,\n  shiftKey: boolean | null,\n): BindingObject {\n  const where = key === 'ArrowLeft' ? 'prefix' : 'suffix';\n  return {\n    key,\n    shiftKey,\n    altKey: null,\n    [where]: /^$/,\n    handler(range) {\n      let { index } = range;\n      if (key === 'ArrowRight') {\n        index += range.length + 1;\n      }\n      const [leaf] = this.quill.getLeaf(index);\n      if (!(leaf instanceof EmbedBlot)) return true;\n      if (key === 'ArrowLeft') {\n        if (shiftKey) {\n          this.quill.setSelection(\n            range.index - 1,\n            range.length + 1,\n            Quill.sources.USER,\n          );\n        } else {\n          this.quill.setSelection(range.index - 1, Quill.sources.USER);\n        }\n      } else if (shiftKey) {\n        this.quill.setSelection(\n          range.index,\n          range.length + 1,\n          Quill.sources.USER,\n        );\n      } else {\n        this.quill.setSelection(\n          range.index + range.length + 1,\n          Quill.sources.USER,\n        );\n      }\n      return false;\n    },\n  };\n}\n\nfunction makeFormatHandler(format: string): BindingObject {\n  return {\n    key: format[0],\n    shortKey: true,\n    handler(range, context) {\n      this.quill.format(format, !context.format[format], Quill.sources.USER);\n    },\n  };\n}\n\nfunction makeTableArrowHandler(up: boolean): BindingObject {\n  return {\n    key: up ? 'ArrowUp' : 'ArrowDown',\n    collapsed: true,\n    format: ['table'],\n    handler(range, context) {\n      // TODO move to table module\n      const key = up ? 'prev' : 'next';\n      const cell = context.line;\n      const targetRow = cell.parent[key];\n      if (targetRow != null) {\n        if (targetRow.statics.blotName === 'table-row') {\n          // @ts-expect-error\n          let targetCell = targetRow.children.head;\n          let cur = cell;\n          while (cur.prev != null) {\n            // @ts-expect-error\n            cur = cur.prev;\n            targetCell = targetCell.next;\n          }\n          const index =\n            targetCell.offset(this.quill.scroll) +\n            Math.min(context.offset, targetCell.length() - 1);\n          this.quill.setSelection(index, 0, Quill.sources.USER);\n        }\n      } else {\n        // @ts-expect-error\n        const targetLine = cell.table()[key];\n        if (targetLine != null) {\n          if (up) {\n            this.quill.setSelection(\n              targetLine.offset(this.quill.scroll) + targetLine.length() - 1,\n              0,\n              Quill.sources.USER,\n            );\n          } else {\n            this.quill.setSelection(\n              targetLine.offset(this.quill.scroll),\n              0,\n              Quill.sources.USER,\n            );\n          }\n        }\n      }\n      return false;\n    },\n  };\n}\n\nfunction normalize(binding: Binding): BindingObject | null {\n  if (typeof binding === 'string' || typeof binding === 'number') {\n    binding = { key: binding };\n  } else if (typeof binding === 'object') {\n    binding = cloneDeep(binding);\n  } else {\n    return null;\n  }\n  if (binding.shortKey) {\n    binding[SHORTKEY] = binding.shortKey;\n    delete binding.shortKey;\n  }\n  return binding;\n}\n\n// TODO: Move into quill.ts or editor.ts\nfunction deleteRange({ quill, range }: { quill: Quill; range: Range }) {\n  const lines = quill.getLines(range);\n  let formats = {};\n  if (lines.length > 1) {\n    const firstFormats = lines[0].formats();\n    const lastFormats = lines[lines.length - 1].formats();\n    formats = AttributeMap.diff(lastFormats, firstFormats) || {};\n  }\n  quill.deleteText(range, Quill.sources.USER);\n  if (Object.keys(formats).length > 0) {\n    quill.formatLine(range.index, 1, formats, Quill.sources.USER);\n  }\n  quill.setSelection(range.index, Quill.sources.SILENT);\n}\n\nfunction tableSide(_table: unknown, row: Blot, cell: Blot, offset: number) {\n  if (row.prev == null && row.next == null) {\n    if (cell.prev == null && cell.next == null) {\n      return offset === 0 ? -1 : 1;\n    }\n    return cell.prev == null ? -1 : 1;\n  }\n  if (row.prev == null) {\n    return -1;\n  }\n  if (row.next == null) {\n    return 1;\n  }\n  return null;\n}\n\nexport { Keyboard as default, SHORTKEY, normalize, deleteRange };\n"],"mappings":"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","ignoreList":[]}]}