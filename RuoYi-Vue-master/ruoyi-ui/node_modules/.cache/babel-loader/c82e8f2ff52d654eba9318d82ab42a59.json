{"remainingRequest":"D:\\02-WorkSpace\\02-Java\\sanguimall\\RuoYi-Vue-master\\ruoyi-ui\\node_modules\\babel-loader\\lib\\index.js!D:\\02-WorkSpace\\02-Java\\sanguimall\\RuoYi-Vue-master\\ruoyi-ui\\node_modules\\quill\\blots\\block.js","dependencies":[{"path":"D:\\02-WorkSpace\\02-Java\\sanguimall\\RuoYi-Vue-master\\ruoyi-ui\\node_modules\\quill\\blots\\block.js","mtime":1759557070370},{"path":"D:\\02-WorkSpace\\02-Java\\sanguimall\\RuoYi-Vue-master\\ruoyi-ui\\babel.config.js","mtime":1757035093000},{"path":"D:\\02-WorkSpace\\02-Java\\sanguimall\\RuoYi-Vue-master\\ruoyi-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1759557068287},{"path":"D:\\02-WorkSpace\\02-Java\\sanguimall\\RuoYi-Vue-master\\ruoyi-ui\\node_modules\\babel-loader\\lib\\index.js","mtime":1759557070186}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["_parchment","require","_quillDelta","_interopRequireDefault","_break","_inline","_text","NEWLINE_LENGTH","Block","exports","default","_BlockBlot","_this","_classCallCheck2","_len","arguments","length","args","Array","_key","_callSuper2","concat","_defineProperty2","_inherits2","_createClass2","key","value","delta","cache","blockDelta","deleteAt","index","_superPropGet2","formatAt","name","scroll","query","Scope","BLOCK","format","Math","min","insertAt","def","lines","split","text","shift","children","tail","block","reduce","lineIndex","line","insertBefore","blot","ref","head","Break","remove","moveChildren","target","optimize","context","path","removeChild","child","force","undefined","clone","parent","next","BlockBlot","blotName","tagName","defaultChild","allowedChildren","Inline","EmbedBlot","TextBlot","BlockEmbed","_EmbedBlot","attach","attributes","AttributorStore","domNode","Delta","insert","_objectSpread2","formats","values","attribute","BLOCK_ATTRIBUTE","_this2","pop","blocks","map","create","forEach","scope","BLOCK_BLOT","filter","descendants","LeafBlot","leaf","bubbleFormats","statics"],"sources":["../../src/blots/block.ts"],"sourcesContent":["import {\n  AttributorStore,\n  BlockBlot,\n  EmbedBlot,\n  LeafBlot,\n  Scope,\n} from 'parchment';\nimport type { Blot, Parent } from 'parchment';\nimport Delta from 'quill-delta';\nimport Break from './break.js';\nimport Inline from './inline.js';\nimport TextBlot from './text.js';\n\nconst NEWLINE_LENGTH = 1;\n\nclass Block extends BlockBlot {\n  cache: { delta?: Delta | null; length?: number } = {};\n\n  delta(): Delta {\n    if (this.cache.delta == null) {\n      this.cache.delta = blockDelta(this);\n    }\n    return this.cache.delta;\n  }\n\n  deleteAt(index: number, length: number) {\n    super.deleteAt(index, length);\n    this.cache = {};\n  }\n\n  formatAt(index: number, length: number, name: string, value: unknown) {\n    if (length <= 0) return;\n    if (this.scroll.query(name, Scope.BLOCK)) {\n      if (index + length === this.length()) {\n        this.format(name, value);\n      }\n    } else {\n      super.formatAt(\n        index,\n        Math.min(length, this.length() - index - 1),\n        name,\n        value,\n      );\n    }\n    this.cache = {};\n  }\n\n  insertAt(index: number, value: string, def?: unknown) {\n    if (def != null) {\n      super.insertAt(index, value, def);\n      this.cache = {};\n      return;\n    }\n    if (value.length === 0) return;\n    const lines = value.split('\\n');\n    const text = lines.shift() as string;\n    if (text.length > 0) {\n      if (index < this.length() - 1 || this.children.tail == null) {\n        super.insertAt(Math.min(index, this.length() - 1), text);\n      } else {\n        this.children.tail.insertAt(this.children.tail.length(), text);\n      }\n      this.cache = {};\n    }\n    // TODO: Fix this next time the file is edited.\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    let block: Blot | this = this;\n    lines.reduce((lineIndex, line) => {\n      // @ts-expect-error Fix me later\n      block = block.split(lineIndex, true);\n      block.insertAt(0, line);\n      return line.length;\n    }, index + text.length);\n  }\n\n  insertBefore(blot: Blot, ref?: Blot | null) {\n    const { head } = this.children;\n    super.insertBefore(blot, ref);\n    if (head instanceof Break) {\n      head.remove();\n    }\n    this.cache = {};\n  }\n\n  length() {\n    if (this.cache.length == null) {\n      this.cache.length = super.length() + NEWLINE_LENGTH;\n    }\n    return this.cache.length;\n  }\n\n  moveChildren(target: Parent, ref?: Blot | null) {\n    super.moveChildren(target, ref);\n    this.cache = {};\n  }\n\n  optimize(context: { [key: string]: any }) {\n    super.optimize(context);\n    this.cache = {};\n  }\n\n  path(index: number) {\n    return super.path(index, true);\n  }\n\n  removeChild(child: Blot) {\n    super.removeChild(child);\n    this.cache = {};\n  }\n\n  split(index: number, force: boolean | undefined = false): Blot | null {\n    if (force && (index === 0 || index >= this.length() - NEWLINE_LENGTH)) {\n      const clone = this.clone();\n      if (index === 0) {\n        this.parent.insertBefore(clone, this);\n        return this;\n      }\n      this.parent.insertBefore(clone, this.next);\n      return clone;\n    }\n    const next = super.split(index, force);\n    this.cache = {};\n    return next;\n  }\n}\nBlock.blotName = 'block';\nBlock.tagName = 'P';\nBlock.defaultChild = Break;\nBlock.allowedChildren = [Break, Inline, EmbedBlot, TextBlot];\n\nclass BlockEmbed extends EmbedBlot {\n  attributes: AttributorStore;\n  domNode: HTMLElement;\n\n  attach() {\n    super.attach();\n    this.attributes = new AttributorStore(this.domNode);\n  }\n\n  delta() {\n    return new Delta().insert(this.value(), {\n      ...this.formats(),\n      ...this.attributes.values(),\n    });\n  }\n\n  format(name: string, value: unknown) {\n    const attribute = this.scroll.query(name, Scope.BLOCK_ATTRIBUTE);\n    if (attribute != null) {\n      // @ts-expect-error TODO: Scroll#query() should return Attributor when scope is attribute\n      this.attributes.attribute(attribute, value);\n    }\n  }\n\n  formatAt(index: number, length: number, name: string, value: unknown) {\n    this.format(name, value);\n  }\n\n  insertAt(index: number, value: string, def?: unknown) {\n    if (def != null) {\n      super.insertAt(index, value, def);\n      return;\n    }\n    const lines = value.split('\\n');\n    const text = lines.pop();\n    const blocks = lines.map((line) => {\n      const block = this.scroll.create(Block.blotName);\n      block.insertAt(0, line);\n      return block;\n    });\n    const ref = this.split(index);\n    blocks.forEach((block) => {\n      this.parent.insertBefore(block, ref);\n    });\n    if (text) {\n      this.parent.insertBefore(this.scroll.create('text', text), ref);\n    }\n  }\n}\nBlockEmbed.scope = Scope.BLOCK_BLOT;\n// It is important for cursor behavior BlockEmbeds use tags that are block level elements\n\nfunction blockDelta(blot: BlockBlot, filter = true) {\n  return blot\n    .descendants(LeafBlot)\n    .reduce((delta, leaf) => {\n      if (leaf.length() === 0) {\n        return delta;\n      }\n      return delta.insert(leaf.value(), bubbleFormats(leaf, {}, filter));\n    }, new Delta())\n    .insert('\\n', bubbleFormats(blot));\n}\n\nfunction bubbleFormats(\n  blot: Blot | null,\n  formats: Record<string, unknown> = {},\n  filter = true,\n): Record<string, unknown> {\n  if (blot == null) return formats;\n  if ('formats' in blot && typeof blot.formats === 'function') {\n    formats = {\n      ...formats,\n      ...blot.formats(),\n    };\n    if (filter) {\n      // exclude syntax highlighting from deltas and getFormat()\n      delete formats['code-token'];\n    }\n  }\n  if (\n    blot.parent == null ||\n    blot.parent.statics.blotName === 'scroll' ||\n    blot.parent.statics.scope !== blot.statics.scope\n  ) {\n    return formats;\n  }\n  return bubbleFormats(blot.parent, formats, filter);\n}\n\nexport { blockDelta, bubbleFormats, BlockEmbed, Block as default };\n"],"mappings":"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","ignoreList":[]}]}